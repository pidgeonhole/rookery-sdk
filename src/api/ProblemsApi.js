/**
 * Pidgeonhole MVP API
 * API for the MVP for Pidgeonhole
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Problem', 'model/ProblemInput', 'model/TestCase', 'model/TestCaseInput'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Problem'), require('../model/ProblemInput'), require('../model/TestCase'), require('../model/TestCaseInput'));
  } else {
    // Browser globals (root is window)
    if (!root.PidgeonholeMvpApi) {
      root.PidgeonholeMvpApi = {};
    }
    root.PidgeonholeMvpApi.ProblemsApi = factory(root.PidgeonholeMvpApi.ApiClient, root.PidgeonholeMvpApi.Problem, root.PidgeonholeMvpApi.ProblemInput, root.PidgeonholeMvpApi.TestCase, root.PidgeonholeMvpApi.TestCaseInput);
  }
}(this, function(ApiClient, Problem, ProblemInput, TestCase, TestCaseInput) {
  'use strict';

  /**
   * Problems service.
   * @module api/ProblemsApi
   * @version 3.0.0
   */

  /**
   * Constructs a new ProblemsApi. 
   * @alias module:api/ProblemsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the categoriesIdProblemsGet operation.
     * @callback module:api/ProblemsApi~categoriesIdProblemsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Problem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Problems in a category
     * Returns information about the problems in a category
     * @param {Number} id Unique identifier for a category
     * @param {module:api/ProblemsApi~categoriesIdProblemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Problem>}
     */
    this.categoriesIdProblemsGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling categoriesIdProblemsGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Problem];

      return this.apiClient.callApi(
        '/categories/{id}/problems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesIdProblemsPost operation.
     * @callback module:api/ProblemsApi~categoriesIdProblemsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Problem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new problem in a category
     * Create a new problem in a category
     * @param {Number} id Unique identifier for a category
     * @param {module:model/ProblemInput} problem 
     * @param {module:api/ProblemsApi~categoriesIdProblemsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Problem}
     */
    this.categoriesIdProblemsPost = function(id, problem, callback) {
      var postBody = problem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling categoriesIdProblemsPost");
      }

      // verify the required parameter 'problem' is set
      if (problem == undefined || problem == null) {
        throw new Error("Missing the required parameter 'problem' when calling categoriesIdProblemsPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Problem;

      return this.apiClient.callApi(
        '/categories/{id}/problems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the problemsIdGet operation.
     * @callback module:api/ProblemsApi~problemsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Problem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A Problem
     * Information about a single categor
     * @param {Number} id Integer ID for a problem
     * @param {module:api/ProblemsApi~problemsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Problem}
     */
    this.problemsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling problemsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Problem;

      return this.apiClient.callApi(
        '/problems/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the problemsIdPut operation.
     * @callback module:api/ProblemsApi~problemsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a problem
     * Edit a problem
     * @param {Number} id Integer ID for a problem
     * @param {Object} opts Optional parameters
     * @param {module:model/ProblemInput} opts.problem The updated attributes of this problem
     * @param {module:api/ProblemsApi~problemsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.problemsIdPut = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['problem'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling problemsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/problems/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the problemsIdTestCasesGet operation.
     * @callback module:api/ProblemsApi~problemsIdTestCasesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestCase>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test cases for a problem
     * Returns an array of test cases for a problem
     * @param {Number} id Integer ID for a problem
     * @param {module:api/ProblemsApi~problemsIdTestCasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestCase>}
     */
    this.problemsIdTestCasesGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling problemsIdTestCasesGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TestCase];

      return this.apiClient.callApi(
        '/problems/{id}/test-cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the problemsIdTestCasesPost operation.
     * @callback module:api/ProblemsApi~problemsIdTestCasesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestCase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new test case for a problem
     * Create a new test case for a problem
     * @param {Number} id Integer ID for a problem
     * @param {module:model/TestCaseInput} testCase The new test case to be created
     * @param {module:api/ProblemsApi~problemsIdTestCasesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestCase}
     */
    this.problemsIdTestCasesPost = function(id, testCase, callback) {
      var postBody = testCase;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling problemsIdTestCasesPost");
      }

      // verify the required parameter 'testCase' is set
      if (testCase == undefined || testCase == null) {
        throw new Error("Missing the required parameter 'testCase' when calling problemsIdTestCasesPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TestCase;

      return this.apiClient.callApi(
        '/problems/{id}/test-cases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
