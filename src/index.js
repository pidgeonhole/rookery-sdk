/**
 * Pidgeonhole MVP API
 * API for the MVP for Pidgeonhole
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Category', 'model/CategoryInput', 'model/Error', 'model/Problem', 'model/ProblemInput', 'model/Reference', 'model/TestCase', 'model/TestCaseInput', 'api/CategoriesApi', 'api/DefaultApi', 'api/ProblemsApi', 'api/TestCasesApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Category'), require('./model/CategoryInput'), require('./model/Error'), require('./model/Problem'), require('./model/ProblemInput'), require('./model/Reference'), require('./model/TestCase'), require('./model/TestCaseInput'), require('./api/CategoriesApi'), require('./api/DefaultApi'), require('./api/ProblemsApi'), require('./api/TestCasesApi'));
  }
}(function(ApiClient, Category, CategoryInput, Error, Problem, ProblemInput, Reference, TestCase, TestCaseInput, CategoriesApi, DefaultApi, ProblemsApi, TestCasesApi) {
  'use strict';

  /**
   * API_for_the_MVP_for_Pidgeonhole.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var PidgeonholeMvpApi = require('index'); // See note below*.
   * var xxxSvc = new PidgeonholeMvpApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new PidgeonholeMvpApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new PidgeonholeMvpApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new PidgeonholeMvpApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 3.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Category model constructor.
     * @property {module:model/Category}
     */
    Category: Category,
    /**
     * The CategoryInput model constructor.
     * @property {module:model/CategoryInput}
     */
    CategoryInput: CategoryInput,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The Problem model constructor.
     * @property {module:model/Problem}
     */
    Problem: Problem,
    /**
     * The ProblemInput model constructor.
     * @property {module:model/ProblemInput}
     */
    ProblemInput: ProblemInput,
    /**
     * The Reference model constructor.
     * @property {module:model/Reference}
     */
    Reference: Reference,
    /**
     * The TestCase model constructor.
     * @property {module:model/TestCase}
     */
    TestCase: TestCase,
    /**
     * The TestCaseInput model constructor.
     * @property {module:model/TestCaseInput}
     */
    TestCaseInput: TestCaseInput,
    /**
     * The CategoriesApi service constructor.
     * @property {module:api/CategoriesApi}
     */
    CategoriesApi: CategoriesApi,
    /**
     * The DefaultApi service constructor.
     * @property {module:api/DefaultApi}
     */
    DefaultApi: DefaultApi,
    /**
     * The ProblemsApi service constructor.
     * @property {module:api/ProblemsApi}
     */
    ProblemsApi: ProblemsApi,
    /**
     * The TestCasesApi service constructor.
     * @property {module:api/TestCasesApi}
     */
    TestCasesApi: TestCasesApi
  };

  return exports;
}));
